package my.com.sains.teams.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DEVICE_SETUP".
*/
public class DeviceSetupDao extends AbstractDao<DeviceSetup, String> {

    public static final String TABLENAME = "DEVICE_SETUP";

    /**
     * Properties of entity DeviceSetup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, String.class, "device_id", true, "DEVICE_ID");
        public final static Property Device_name = new Property(1, String.class, "device_name", false, "DEVICE_NAME");
        public final static Property Device_model = new Property(2, String.class, "device_model", false, "DEVICE_MODEL");
        public final static Property Device_serial_no = new Property(3, String.class, "device_serial_no", false, "DEVICE_SERIAL_NO");
        public final static Property Mobile_id = new Property(4, String.class, "mobile_id", false, "MOBILE_ID");
        public final static Property Created_by = new Property(5, String.class, "created_by", false, "CREATED_BY");
        public final static Property Created_date = new Property(6, String.class, "created_date", false, "CREATED_DATE");
        public final static Property Modified_by = new Property(7, String.class, "modified_by", false, "MODIFIED_BY");
        public final static Property Modified_date = new Property(8, String.class, "modified_date", false, "MODIFIED_DATE");
        public final static Property Modified_src = new Property(9, String.class, "modified_src", false, "MODIFIED_SRC");
    }


    public DeviceSetupDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceSetupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_SETUP\" (" + //
                "\"DEVICE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: device_id
                "\"DEVICE_NAME\" TEXT," + // 1: device_name
                "\"DEVICE_MODEL\" TEXT," + // 2: device_model
                "\"DEVICE_SERIAL_NO\" TEXT," + // 3: device_serial_no
                "\"MOBILE_ID\" TEXT," + // 4: mobile_id
                "\"CREATED_BY\" TEXT," + // 5: created_by
                "\"CREATED_DATE\" TEXT," + // 6: created_date
                "\"MODIFIED_BY\" TEXT," + // 7: modified_by
                "\"MODIFIED_DATE\" TEXT," + // 8: modified_date
                "\"MODIFIED_SRC\" TEXT);"); // 9: modified_src
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_SETUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceSetup entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        String device_model = entity.getDevice_model();
        if (device_model != null) {
            stmt.bindString(3, device_model);
        }
 
        String device_serial_no = entity.getDevice_serial_no();
        if (device_serial_no != null) {
            stmt.bindString(4, device_serial_no);
        }
 
        String mobile_id = entity.getMobile_id();
        if (mobile_id != null) {
            stmt.bindString(5, mobile_id);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(6, created_by);
        }
 
        String created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindString(7, created_date);
        }
 
        String modified_by = entity.getModified_by();
        if (modified_by != null) {
            stmt.bindString(8, modified_by);
        }
 
        String modified_date = entity.getModified_date();
        if (modified_date != null) {
            stmt.bindString(9, modified_date);
        }
 
        String modified_src = entity.getModified_src();
        if (modified_src != null) {
            stmt.bindString(10, modified_src);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceSetup entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        String device_model = entity.getDevice_model();
        if (device_model != null) {
            stmt.bindString(3, device_model);
        }
 
        String device_serial_no = entity.getDevice_serial_no();
        if (device_serial_no != null) {
            stmt.bindString(4, device_serial_no);
        }
 
        String mobile_id = entity.getMobile_id();
        if (mobile_id != null) {
            stmt.bindString(5, mobile_id);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(6, created_by);
        }
 
        String created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindString(7, created_date);
        }
 
        String modified_by = entity.getModified_by();
        if (modified_by != null) {
            stmt.bindString(8, modified_by);
        }
 
        String modified_date = entity.getModified_date();
        if (modified_date != null) {
            stmt.bindString(9, modified_date);
        }
 
        String modified_src = entity.getModified_src();
        if (modified_src != null) {
            stmt.bindString(10, modified_src);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DeviceSetup readEntity(Cursor cursor, int offset) {
        DeviceSetup entity = new DeviceSetup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // device_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // device_model
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // device_serial_no
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // created_by
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // created_date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // modified_by
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // modified_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // modified_src
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceSetup entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDevice_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_model(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevice_serial_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_by(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreated_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setModified_by(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setModified_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setModified_src(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DeviceSetup entity, long rowId) {
        return entity.getDevice_id();
    }
    
    @Override
    public String getKey(DeviceSetup entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceSetup entity) {
        return entity.getDevice_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
