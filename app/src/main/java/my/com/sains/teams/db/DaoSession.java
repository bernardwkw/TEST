package my.com.sains.teams.db;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig logRegisterQueryDaoConfig;
    private final DaoConfig mobileDocDaoConfig;
    private final DaoConfig deviceSetupDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig logRegisterDaoConfig;
    private final DaoConfig inspectUploadDaoConfig;
    private final DaoConfig myInspectUploadDaoConfig;

    private final LogRegisterQueryDao logRegisterQueryDao;
    private final MobileDocDao mobileDocDao;
    private final DeviceSetupDao deviceSetupDao;
    private final UserDao userDao;
    private final LogRegisterDao logRegisterDao;
    private final InspectUploadDao inspectUploadDao;
    private final MyInspectUploadDao myInspectUploadDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        logRegisterQueryDaoConfig = daoConfigMap.get(LogRegisterQueryDao.class).clone();
        logRegisterQueryDaoConfig.initIdentityScope(type);

        mobileDocDaoConfig = daoConfigMap.get(MobileDocDao.class).clone();
        mobileDocDaoConfig.initIdentityScope(type);

        deviceSetupDaoConfig = daoConfigMap.get(DeviceSetupDao.class).clone();
        deviceSetupDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        logRegisterDaoConfig = daoConfigMap.get(LogRegisterDao.class).clone();
        logRegisterDaoConfig.initIdentityScope(type);

        inspectUploadDaoConfig = daoConfigMap.get(InspectUploadDao.class).clone();
        inspectUploadDaoConfig.initIdentityScope(type);

        myInspectUploadDaoConfig = daoConfigMap.get(MyInspectUploadDao.class).clone();
        myInspectUploadDaoConfig.initIdentityScope(type);

        logRegisterQueryDao = new LogRegisterQueryDao(logRegisterQueryDaoConfig, this);
        mobileDocDao = new MobileDocDao(mobileDocDaoConfig, this);
        deviceSetupDao = new DeviceSetupDao(deviceSetupDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        logRegisterDao = new LogRegisterDao(logRegisterDaoConfig, this);
        inspectUploadDao = new InspectUploadDao(inspectUploadDaoConfig, this);
        myInspectUploadDao = new MyInspectUploadDao(myInspectUploadDaoConfig, this);

        registerDao(LogRegisterQuery.class, logRegisterQueryDao);
        registerDao(MobileDoc.class, mobileDocDao);
        registerDao(DeviceSetup.class, deviceSetupDao);
        registerDao(User.class, userDao);
        registerDao(LogRegister.class, logRegisterDao);
        registerDao(InspectUpload.class, inspectUploadDao);
        registerDao(MyInspectUpload.class, myInspectUploadDao);
    }
    
    public void clear() {
        logRegisterQueryDaoConfig.clearIdentityScope();
        mobileDocDaoConfig.clearIdentityScope();
        deviceSetupDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        logRegisterDaoConfig.clearIdentityScope();
        inspectUploadDaoConfig.clearIdentityScope();
        myInspectUploadDaoConfig.clearIdentityScope();
    }

    public LogRegisterQueryDao getLogRegisterQueryDao() {
        return logRegisterQueryDao;
    }

    public MobileDocDao getMobileDocDao() {
        return mobileDocDao;
    }

    public DeviceSetupDao getDeviceSetupDao() {
        return deviceSetupDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public LogRegisterDao getLogRegisterDao() {
        return logRegisterDao;
    }

    public InspectUploadDao getInspectUploadDao() {
        return inspectUploadDao;
    }

    public MyInspectUploadDao getMyInspectUploadDao() {
        return myInspectUploadDao;
    }

}
