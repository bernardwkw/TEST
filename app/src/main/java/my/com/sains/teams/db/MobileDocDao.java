package my.com.sains.teams.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MOBILE_DOC".
*/
public class MobileDocDao extends AbstractDao<MobileDoc, String> {

    public static final String TABLENAME = "MOBILE_DOC";

    /**
     * Properties of entity MobileDoc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Exch_id = new Property(0, String.class, "exch_id", true, "EXCH_ID");
        public final static Property Office_id = new Property(1, String.class, "office_id", false, "OFFICE_ID");
        public final static Property Device_id = new Property(2, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Doc_type = new Property(3, String.class, "doc_type", false, "DOC_TYPE");
        public final static Property Source_doc_id = new Property(4, String.class, "source_doc_id", false, "SOURCE_DOC_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Total_logs = new Property(6, Integer.class, "total_logs", false, "TOTAL_LOGS");
        public final static Property Batch_no = new Property(7, String.class, "batch_no", false, "BATCH_NO");
        public final static Property License_type = new Property(8, String.class, "license_type", false, "LICENSE_TYPE");
        public final static Property Acct_code = new Property(9, String.class, "acct_code", false, "ACCT_CODE");
        public final static Property Hammer_mark_no = new Property(10, String.class, "hammer_mark_no", false, "HAMMER_MARK_NO");
        public final static Property Forest_type = new Property(11, String.class, "forest_type", false, "FOREST_TYPE");
        public final static Property Type_of_produce = new Property(12, String.class, "type_of_produce", false, "TYPE_OF_PRODUCE");
        public final static Property Trp_ref_no = new Property(13, String.class, "trp_ref_no", false, "TRP_REF_NO");
        public final static Property Security_no = new Property(14, String.class, "security_no", false, "SECURITY_NO");
        public final static Property Tran_mode = new Property(15, String.class, "tran_mode", false, "TRAN_MODE");
        public final static Property By_name = new Property(16, String.class, "by_name", false, "BY_NAME");
        public final static Property Rp_no = new Property(17, String.class, "rp_no", false, "RP_NO");
        public final static Property Rp_book_no = new Property(18, String.class, "rp_book_no", false, "RP_BOOK_NO");
        public final static Property Barge_raft = new Property(19, String.class, "barge_raft", false, "BARGE_RAFT");
        public final static Property Frm_loc = new Property(20, String.class, "frm_loc", false, "FRM_LOC");
        public final static Property To_loc = new Property(21, String.class, "to_loc", false, "TO_LOC");
        public final static Property Receiving_office = new Property(22, String.class, "receiving_office", false, "RECEIVING_OFFICE");
        public final static Property Issueing_office = new Property(23, String.class, "issueing_office", false, "ISSUEING_OFFICE");
        public final static Property Trp_date_issued = new Property(24, String.class, "trp_date_issued", false, "TRP_DATE_ISSUED");
        public final static Property Trp_date_expire = new Property(25, String.class, "trp_date_expire", false, "TRP_DATE_EXPIRE");
        public final static Property Trp_issued_by = new Property(26, String.class, "trp_issued_by", false, "TRP_ISSUED_BY");
        public final static Property Ecc_excc_no = new Property(27, String.class, "ecc_excc_no", false, "ECC_EXCC_NO");
        public final static Property Ecc_excc_issue_date = new Property(28, String.class, "ecc_excc_issue_date", false, "ECC_EXCC_ISSUE_DATE");
        public final static Property Sh_ref_no = new Property(29, String.class, "sh_ref_no", false, "SH_REF_NO");
        public final static Property Sh_reason = new Property(30, String.class, "sh_reason", false, "SH_REASON");
        public final static Property Exch_status = new Property(31, String.class, "exch_status", false, "EXCH_STATUS");
        public final static Property Sync_status = new Property(32, String.class, "sync_status", false, "SYNC_STATUS");
        public final static Property Sync_date = new Property(33, String.class, "sync_date", false, "SYNC_DATE");
        public final static Property Created_by = new Property(34, String.class, "created_by", false, "CREATED_BY");
        public final static Property Created_date = new Property(35, String.class, "created_date", false, "CREATED_DATE");
        public final static Property Modified_by = new Property(36, String.class, "modified_by", false, "MODIFIED_BY");
        public final static Property Modified_date = new Property(37, String.class, "modified_date", false, "MODIFIED_DATE");
        public final static Property Modified_src = new Property(38, String.class, "modified_src", false, "MODIFIED_SRC");
    }


    public MobileDocDao(DaoConfig config) {
        super(config);
    }
    
    public MobileDocDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOBILE_DOC\" (" + //
                "\"EXCH_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: exch_id
                "\"OFFICE_ID\" TEXT," + // 1: office_id
                "\"DEVICE_ID\" TEXT," + // 2: device_id
                "\"DOC_TYPE\" TEXT," + // 3: doc_type
                "\"SOURCE_DOC_ID\" TEXT," + // 4: source_doc_id
                "\"NAME\" TEXT," + // 5: name
                "\"TOTAL_LOGS\" INTEGER," + // 6: total_logs
                "\"BATCH_NO\" TEXT," + // 7: batch_no
                "\"LICENSE_TYPE\" TEXT," + // 8: license_type
                "\"ACCT_CODE\" TEXT," + // 9: acct_code
                "\"HAMMER_MARK_NO\" TEXT," + // 10: hammer_mark_no
                "\"FOREST_TYPE\" TEXT," + // 11: forest_type
                "\"TYPE_OF_PRODUCE\" TEXT," + // 12: type_of_produce
                "\"TRP_REF_NO\" TEXT," + // 13: trp_ref_no
                "\"SECURITY_NO\" TEXT," + // 14: security_no
                "\"TRAN_MODE\" TEXT," + // 15: tran_mode
                "\"BY_NAME\" TEXT," + // 16: by_name
                "\"RP_NO\" TEXT," + // 17: rp_no
                "\"RP_BOOK_NO\" TEXT," + // 18: rp_book_no
                "\"BARGE_RAFT\" TEXT," + // 19: barge_raft
                "\"FRM_LOC\" TEXT," + // 20: frm_loc
                "\"TO_LOC\" TEXT," + // 21: to_loc
                "\"RECEIVING_OFFICE\" TEXT," + // 22: receiving_office
                "\"ISSUEING_OFFICE\" TEXT," + // 23: issueing_office
                "\"TRP_DATE_ISSUED\" TEXT," + // 24: trp_date_issued
                "\"TRP_DATE_EXPIRE\" TEXT," + // 25: trp_date_expire
                "\"TRP_ISSUED_BY\" TEXT," + // 26: trp_issued_by
                "\"ECC_EXCC_NO\" TEXT," + // 27: ecc_excc_no
                "\"ECC_EXCC_ISSUE_DATE\" TEXT," + // 28: ecc_excc_issue_date
                "\"SH_REF_NO\" TEXT," + // 29: sh_ref_no
                "\"SH_REASON\" TEXT," + // 30: sh_reason
                "\"EXCH_STATUS\" TEXT," + // 31: exch_status
                "\"SYNC_STATUS\" TEXT," + // 32: sync_status
                "\"SYNC_DATE\" TEXT," + // 33: sync_date
                "\"CREATED_BY\" TEXT," + // 34: created_by
                "\"CREATED_DATE\" TEXT," + // 35: created_date
                "\"MODIFIED_BY\" TEXT," + // 36: modified_by
                "\"MODIFIED_DATE\" TEXT," + // 37: modified_date
                "\"MODIFIED_SRC\" TEXT);"); // 38: modified_src
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOBILE_DOC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MobileDoc entity) {
        stmt.clearBindings();
 
        String exch_id = entity.getExch_id();
        if (exch_id != null) {
            stmt.bindString(1, exch_id);
        }
 
        String office_id = entity.getOffice_id();
        if (office_id != null) {
            stmt.bindString(2, office_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(3, device_id);
        }
 
        String doc_type = entity.getDoc_type();
        if (doc_type != null) {
            stmt.bindString(4, doc_type);
        }
 
        String source_doc_id = entity.getSource_doc_id();
        if (source_doc_id != null) {
            stmt.bindString(5, source_doc_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Integer total_logs = entity.getTotal_logs();
        if (total_logs != null) {
            stmt.bindLong(7, total_logs);
        }
 
        String batch_no = entity.getBatch_no();
        if (batch_no != null) {
            stmt.bindString(8, batch_no);
        }
 
        String license_type = entity.getLicense_type();
        if (license_type != null) {
            stmt.bindString(9, license_type);
        }
 
        String acct_code = entity.getAcct_code();
        if (acct_code != null) {
            stmt.bindString(10, acct_code);
        }
 
        String hammer_mark_no = entity.getHammer_mark_no();
        if (hammer_mark_no != null) {
            stmt.bindString(11, hammer_mark_no);
        }
 
        String forest_type = entity.getForest_type();
        if (forest_type != null) {
            stmt.bindString(12, forest_type);
        }
 
        String type_of_produce = entity.getType_of_produce();
        if (type_of_produce != null) {
            stmt.bindString(13, type_of_produce);
        }
 
        String trp_ref_no = entity.getTrp_ref_no();
        if (trp_ref_no != null) {
            stmt.bindString(14, trp_ref_no);
        }
 
        String security_no = entity.getSecurity_no();
        if (security_no != null) {
            stmt.bindString(15, security_no);
        }
 
        String tran_mode = entity.getTran_mode();
        if (tran_mode != null) {
            stmt.bindString(16, tran_mode);
        }
 
        String by_name = entity.getBy_name();
        if (by_name != null) {
            stmt.bindString(17, by_name);
        }
 
        String rp_no = entity.getRp_no();
        if (rp_no != null) {
            stmt.bindString(18, rp_no);
        }
 
        String rp_book_no = entity.getRp_book_no();
        if (rp_book_no != null) {
            stmt.bindString(19, rp_book_no);
        }
 
        String barge_raft = entity.getBarge_raft();
        if (barge_raft != null) {
            stmt.bindString(20, barge_raft);
        }
 
        String frm_loc = entity.getFrm_loc();
        if (frm_loc != null) {
            stmt.bindString(21, frm_loc);
        }
 
        String to_loc = entity.getTo_loc();
        if (to_loc != null) {
            stmt.bindString(22, to_loc);
        }
 
        String receiving_office = entity.getReceiving_office();
        if (receiving_office != null) {
            stmt.bindString(23, receiving_office);
        }
 
        String issueing_office = entity.getIssueing_office();
        if (issueing_office != null) {
            stmt.bindString(24, issueing_office);
        }
 
        String trp_date_issued = entity.getTrp_date_issued();
        if (trp_date_issued != null) {
            stmt.bindString(25, trp_date_issued);
        }
 
        String trp_date_expire = entity.getTrp_date_expire();
        if (trp_date_expire != null) {
            stmt.bindString(26, trp_date_expire);
        }
 
        String trp_issued_by = entity.getTrp_issued_by();
        if (trp_issued_by != null) {
            stmt.bindString(27, trp_issued_by);
        }
 
        String ecc_excc_no = entity.getEcc_excc_no();
        if (ecc_excc_no != null) {
            stmt.bindString(28, ecc_excc_no);
        }
 
        String ecc_excc_issue_date = entity.getEcc_excc_issue_date();
        if (ecc_excc_issue_date != null) {
            stmt.bindString(29, ecc_excc_issue_date);
        }
 
        String sh_ref_no = entity.getSh_ref_no();
        if (sh_ref_no != null) {
            stmt.bindString(30, sh_ref_no);
        }
 
        String sh_reason = entity.getSh_reason();
        if (sh_reason != null) {
            stmt.bindString(31, sh_reason);
        }
 
        String exch_status = entity.getExch_status();
        if (exch_status != null) {
            stmt.bindString(32, exch_status);
        }
 
        String sync_status = entity.getSync_status();
        if (sync_status != null) {
            stmt.bindString(33, sync_status);
        }
 
        String sync_date = entity.getSync_date();
        if (sync_date != null) {
            stmt.bindString(34, sync_date);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(35, created_by);
        }
 
        String created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindString(36, created_date);
        }
 
        String modified_by = entity.getModified_by();
        if (modified_by != null) {
            stmt.bindString(37, modified_by);
        }
 
        String modified_date = entity.getModified_date();
        if (modified_date != null) {
            stmt.bindString(38, modified_date);
        }
 
        String modified_src = entity.getModified_src();
        if (modified_src != null) {
            stmt.bindString(39, modified_src);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MobileDoc entity) {
        stmt.clearBindings();
 
        String exch_id = entity.getExch_id();
        if (exch_id != null) {
            stmt.bindString(1, exch_id);
        }
 
        String office_id = entity.getOffice_id();
        if (office_id != null) {
            stmt.bindString(2, office_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(3, device_id);
        }
 
        String doc_type = entity.getDoc_type();
        if (doc_type != null) {
            stmt.bindString(4, doc_type);
        }
 
        String source_doc_id = entity.getSource_doc_id();
        if (source_doc_id != null) {
            stmt.bindString(5, source_doc_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Integer total_logs = entity.getTotal_logs();
        if (total_logs != null) {
            stmt.bindLong(7, total_logs);
        }
 
        String batch_no = entity.getBatch_no();
        if (batch_no != null) {
            stmt.bindString(8, batch_no);
        }
 
        String license_type = entity.getLicense_type();
        if (license_type != null) {
            stmt.bindString(9, license_type);
        }
 
        String acct_code = entity.getAcct_code();
        if (acct_code != null) {
            stmt.bindString(10, acct_code);
        }
 
        String hammer_mark_no = entity.getHammer_mark_no();
        if (hammer_mark_no != null) {
            stmt.bindString(11, hammer_mark_no);
        }
 
        String forest_type = entity.getForest_type();
        if (forest_type != null) {
            stmt.bindString(12, forest_type);
        }
 
        String type_of_produce = entity.getType_of_produce();
        if (type_of_produce != null) {
            stmt.bindString(13, type_of_produce);
        }
 
        String trp_ref_no = entity.getTrp_ref_no();
        if (trp_ref_no != null) {
            stmt.bindString(14, trp_ref_no);
        }
 
        String security_no = entity.getSecurity_no();
        if (security_no != null) {
            stmt.bindString(15, security_no);
        }
 
        String tran_mode = entity.getTran_mode();
        if (tran_mode != null) {
            stmt.bindString(16, tran_mode);
        }
 
        String by_name = entity.getBy_name();
        if (by_name != null) {
            stmt.bindString(17, by_name);
        }
 
        String rp_no = entity.getRp_no();
        if (rp_no != null) {
            stmt.bindString(18, rp_no);
        }
 
        String rp_book_no = entity.getRp_book_no();
        if (rp_book_no != null) {
            stmt.bindString(19, rp_book_no);
        }
 
        String barge_raft = entity.getBarge_raft();
        if (barge_raft != null) {
            stmt.bindString(20, barge_raft);
        }
 
        String frm_loc = entity.getFrm_loc();
        if (frm_loc != null) {
            stmt.bindString(21, frm_loc);
        }
 
        String to_loc = entity.getTo_loc();
        if (to_loc != null) {
            stmt.bindString(22, to_loc);
        }
 
        String receiving_office = entity.getReceiving_office();
        if (receiving_office != null) {
            stmt.bindString(23, receiving_office);
        }
 
        String issueing_office = entity.getIssueing_office();
        if (issueing_office != null) {
            stmt.bindString(24, issueing_office);
        }
 
        String trp_date_issued = entity.getTrp_date_issued();
        if (trp_date_issued != null) {
            stmt.bindString(25, trp_date_issued);
        }
 
        String trp_date_expire = entity.getTrp_date_expire();
        if (trp_date_expire != null) {
            stmt.bindString(26, trp_date_expire);
        }
 
        String trp_issued_by = entity.getTrp_issued_by();
        if (trp_issued_by != null) {
            stmt.bindString(27, trp_issued_by);
        }
 
        String ecc_excc_no = entity.getEcc_excc_no();
        if (ecc_excc_no != null) {
            stmt.bindString(28, ecc_excc_no);
        }
 
        String ecc_excc_issue_date = entity.getEcc_excc_issue_date();
        if (ecc_excc_issue_date != null) {
            stmt.bindString(29, ecc_excc_issue_date);
        }
 
        String sh_ref_no = entity.getSh_ref_no();
        if (sh_ref_no != null) {
            stmt.bindString(30, sh_ref_no);
        }
 
        String sh_reason = entity.getSh_reason();
        if (sh_reason != null) {
            stmt.bindString(31, sh_reason);
        }
 
        String exch_status = entity.getExch_status();
        if (exch_status != null) {
            stmt.bindString(32, exch_status);
        }
 
        String sync_status = entity.getSync_status();
        if (sync_status != null) {
            stmt.bindString(33, sync_status);
        }
 
        String sync_date = entity.getSync_date();
        if (sync_date != null) {
            stmt.bindString(34, sync_date);
        }
 
        String created_by = entity.getCreated_by();
        if (created_by != null) {
            stmt.bindString(35, created_by);
        }
 
        String created_date = entity.getCreated_date();
        if (created_date != null) {
            stmt.bindString(36, created_date);
        }
 
        String modified_by = entity.getModified_by();
        if (modified_by != null) {
            stmt.bindString(37, modified_by);
        }
 
        String modified_date = entity.getModified_date();
        if (modified_date != null) {
            stmt.bindString(38, modified_date);
        }
 
        String modified_src = entity.getModified_src();
        if (modified_src != null) {
            stmt.bindString(39, modified_src);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MobileDoc readEntity(Cursor cursor, int offset) {
        MobileDoc entity = new MobileDoc( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // exch_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // office_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // device_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // doc_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source_doc_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // total_logs
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // batch_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // license_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // acct_code
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hammer_mark_no
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // forest_type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // type_of_produce
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // trp_ref_no
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // security_no
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tran_mode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // by_name
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // rp_no
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // rp_book_no
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // barge_raft
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // frm_loc
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // to_loc
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // receiving_office
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // issueing_office
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // trp_date_issued
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // trp_date_expire
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // trp_issued_by
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ecc_excc_no
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // ecc_excc_issue_date
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // sh_ref_no
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // sh_reason
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // exch_status
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // sync_status
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // sync_date
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // created_by
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // created_date
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // modified_by
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // modified_date
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38) // modified_src
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MobileDoc entity, int offset) {
        entity.setExch_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOffice_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoc_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSource_doc_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotal_logs(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBatch_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLicense_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAcct_code(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHammer_mark_no(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setForest_type(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType_of_produce(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTrp_ref_no(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSecurity_no(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTran_mode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBy_name(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRp_no(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRp_book_no(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBarge_raft(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFrm_loc(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTo_loc(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setReceiving_office(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIssueing_office(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTrp_date_issued(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTrp_date_expire(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTrp_issued_by(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEcc_excc_no(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setEcc_excc_issue_date(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSh_ref_no(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSh_reason(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setExch_status(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSync_status(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSync_date(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCreated_by(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setCreated_date(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setModified_by(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setModified_date(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setModified_src(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MobileDoc entity, long rowId) {
        return entity.getExch_id();
    }
    
    @Override
    public String getKey(MobileDoc entity) {
        if(entity != null) {
            return entity.getExch_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MobileDoc entity) {
        return entity.getExch_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
