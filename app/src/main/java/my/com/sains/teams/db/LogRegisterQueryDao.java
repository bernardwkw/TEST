package my.com.sains.teams.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOG_REGISTER_QUERY".
*/
public class LogRegisterQueryDao extends AbstractDao<LogRegisterQuery, String> {

    public static final String TABLENAME = "LOG_REGISTER_QUERY";

    /**
     * Properties of entity LogRegisterQuery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Regis_id = new Property(0, String.class, "regis_id", true, "REGIS_ID");
        public final static Property Device_id = new Property(1, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Office_id = new Property(2, String.class, "office_id", false, "OFFICE_ID");
        public final static Property Licensee = new Property(3, String.class, "licensee", false, "LICENSEE");
        public final static Property Property_mark = new Property(4, String.class, "property_mark", false, "PROPERTY_MARK");
        public final static Property Pec_ref_no = new Property(5, String.class, "pec_ref_no", false, "PEC_REF_NO");
        public final static Property Lpi_no = new Property(6, String.class, "lpi_no", false, "LPI_NO");
        public final static Property Dpr_ref_no = new Property(7, String.class, "dpr_ref_no", false, "DPR_REF_NO");
        public final static Property Ra_ref_no = new Property(8, String.class, "ra_ref_no", false, "RA_REF_NO");
        public final static Property Harvest_date = new Property(9, String.class, "harvest_date", false, "HARVEST_DATE");
        public final static Property Coupe_no = new Property(10, String.class, "coupe_no", false, "COUPE_NO");
        public final static Property Block_no = new Property(11, String.class, "block_no", false, "BLOCK_NO");
        public final static Property Camp_code = new Property(12, String.class, "camp_code", false, "CAMP_CODE");
        public final static Property Log_serial_no = new Property(13, String.class, "log_serial_no", false, "LOG_SERIAL_NO");
        public final static Property Species_code = new Property(14, String.class, "species_code", false, "SPECIES_CODE");
        public final static Property Length = new Property(15, Double.class, "length", false, "LENGTH");
        public final static Property Diameter = new Property(16, Double.class, "diameter", false, "DIAMETER");
        public final static Property Defect_dia = new Property(17, Double.class, "defect_dia", false, "DEFECT_DIA");
        public final static Property Net_vol = new Property(18, Double.class, "net_vol", false, "NET_VOL");
        public final static Property Compute_vol = new Property(19, Double.class, "compute_vol", false, "COMPUTE_VOL");
        public final static Property Ra_processing_office = new Property(20, String.class, "ra_processing_office", false, "RA_PROCESSING_OFFICE");
        public final static Property Hammer_mark_no = new Property(21, String.class, "hammer_mark_no", false, "HAMMER_MARK_NO");
        public final static Property Place_ra_marking = new Property(22, String.class, "place_ra_marking", false, "PLACE_RA_MARKING");
        public final static Property Trp_ref_no = new Property(23, String.class, "trp_ref_no", false, "TRP_REF_NO");
        public final static Property Name = new Property(24, String.class, "name", false, "NAME");
        public final static Property Tran_mode = new Property(25, String.class, "tran_mode", false, "TRAN_MODE");
        public final static Property By_name = new Property(26, String.class, "by_name", false, "BY_NAME");
        public final static Property Rp_no = new Property(27, String.class, "rp_no", false, "RP_NO");
        public final static Property To_loc = new Property(28, String.class, "to_loc", false, "TO_LOC");
        public final static Property Frm_loc = new Property(29, String.class, "frm_loc", false, "FRM_LOC");
        public final static Property Sync_status = new Property(30, String.class, "sync_status", false, "SYNC_STATUS");
    }


    public LogRegisterQueryDao(DaoConfig config) {
        super(config);
    }
    
    public LogRegisterQueryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_REGISTER_QUERY\" (" + //
                "\"REGIS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: regis_id
                "\"DEVICE_ID\" TEXT," + // 1: device_id
                "\"OFFICE_ID\" TEXT," + // 2: office_id
                "\"LICENSEE\" TEXT," + // 3: licensee
                "\"PROPERTY_MARK\" TEXT," + // 4: property_mark
                "\"PEC_REF_NO\" TEXT," + // 5: pec_ref_no
                "\"LPI_NO\" TEXT," + // 6: lpi_no
                "\"DPR_REF_NO\" TEXT," + // 7: dpr_ref_no
                "\"RA_REF_NO\" TEXT," + // 8: ra_ref_no
                "\"HARVEST_DATE\" TEXT," + // 9: harvest_date
                "\"COUPE_NO\" TEXT," + // 10: coupe_no
                "\"BLOCK_NO\" TEXT," + // 11: block_no
                "\"CAMP_CODE\" TEXT," + // 12: camp_code
                "\"LOG_SERIAL_NO\" TEXT," + // 13: log_serial_no
                "\"SPECIES_CODE\" TEXT," + // 14: species_code
                "\"LENGTH\" REAL," + // 15: length
                "\"DIAMETER\" REAL," + // 16: diameter
                "\"DEFECT_DIA\" REAL," + // 17: defect_dia
                "\"NET_VOL\" REAL," + // 18: net_vol
                "\"COMPUTE_VOL\" REAL," + // 19: compute_vol
                "\"RA_PROCESSING_OFFICE\" TEXT," + // 20: ra_processing_office
                "\"HAMMER_MARK_NO\" TEXT," + // 21: hammer_mark_no
                "\"PLACE_RA_MARKING\" TEXT," + // 22: place_ra_marking
                "\"TRP_REF_NO\" TEXT," + // 23: trp_ref_no
                "\"NAME\" TEXT," + // 24: name
                "\"TRAN_MODE\" TEXT," + // 25: tran_mode
                "\"BY_NAME\" TEXT," + // 26: by_name
                "\"RP_NO\" TEXT," + // 27: rp_no
                "\"TO_LOC\" TEXT," + // 28: to_loc
                "\"FRM_LOC\" TEXT," + // 29: frm_loc
                "\"SYNC_STATUS\" TEXT);"); // 30: sync_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_REGISTER_QUERY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogRegisterQuery entity) {
        stmt.clearBindings();
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(1, regis_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(2, device_id);
        }
 
        String office_id = entity.getOffice_id();
        if (office_id != null) {
            stmt.bindString(3, office_id);
        }
 
        String licensee = entity.getLicensee();
        if (licensee != null) {
            stmt.bindString(4, licensee);
        }
 
        String property_mark = entity.getProperty_mark();
        if (property_mark != null) {
            stmt.bindString(5, property_mark);
        }
 
        String pec_ref_no = entity.getPec_ref_no();
        if (pec_ref_no != null) {
            stmt.bindString(6, pec_ref_no);
        }
 
        String lpi_no = entity.getLpi_no();
        if (lpi_no != null) {
            stmt.bindString(7, lpi_no);
        }
 
        String dpr_ref_no = entity.getDpr_ref_no();
        if (dpr_ref_no != null) {
            stmt.bindString(8, dpr_ref_no);
        }
 
        String ra_ref_no = entity.getRa_ref_no();
        if (ra_ref_no != null) {
            stmt.bindString(9, ra_ref_no);
        }
 
        String harvest_date = entity.getHarvest_date();
        if (harvest_date != null) {
            stmt.bindString(10, harvest_date);
        }
 
        String coupe_no = entity.getCoupe_no();
        if (coupe_no != null) {
            stmt.bindString(11, coupe_no);
        }
 
        String block_no = entity.getBlock_no();
        if (block_no != null) {
            stmt.bindString(12, block_no);
        }
 
        String camp_code = entity.getCamp_code();
        if (camp_code != null) {
            stmt.bindString(13, camp_code);
        }
 
        String log_serial_no = entity.getLog_serial_no();
        if (log_serial_no != null) {
            stmt.bindString(14, log_serial_no);
        }
 
        String species_code = entity.getSpecies_code();
        if (species_code != null) {
            stmt.bindString(15, species_code);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(16, length);
        }
 
        Double diameter = entity.getDiameter();
        if (diameter != null) {
            stmt.bindDouble(17, diameter);
        }
 
        Double defect_dia = entity.getDefect_dia();
        if (defect_dia != null) {
            stmt.bindDouble(18, defect_dia);
        }
 
        Double net_vol = entity.getNet_vol();
        if (net_vol != null) {
            stmt.bindDouble(19, net_vol);
        }
 
        Double compute_vol = entity.getCompute_vol();
        if (compute_vol != null) {
            stmt.bindDouble(20, compute_vol);
        }
 
        String ra_processing_office = entity.getRa_processing_office();
        if (ra_processing_office != null) {
            stmt.bindString(21, ra_processing_office);
        }
 
        String hammer_mark_no = entity.getHammer_mark_no();
        if (hammer_mark_no != null) {
            stmt.bindString(22, hammer_mark_no);
        }
 
        String place_ra_marking = entity.getPlace_ra_marking();
        if (place_ra_marking != null) {
            stmt.bindString(23, place_ra_marking);
        }
 
        String trp_ref_no = entity.getTrp_ref_no();
        if (trp_ref_no != null) {
            stmt.bindString(24, trp_ref_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(25, name);
        }
 
        String tran_mode = entity.getTran_mode();
        if (tran_mode != null) {
            stmt.bindString(26, tran_mode);
        }
 
        String by_name = entity.getBy_name();
        if (by_name != null) {
            stmt.bindString(27, by_name);
        }
 
        String rp_no = entity.getRp_no();
        if (rp_no != null) {
            stmt.bindString(28, rp_no);
        }
 
        String to_loc = entity.getTo_loc();
        if (to_loc != null) {
            stmt.bindString(29, to_loc);
        }
 
        String frm_loc = entity.getFrm_loc();
        if (frm_loc != null) {
            stmt.bindString(30, frm_loc);
        }
 
        String sync_status = entity.getSync_status();
        if (sync_status != null) {
            stmt.bindString(31, sync_status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogRegisterQuery entity) {
        stmt.clearBindings();
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(1, regis_id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(2, device_id);
        }
 
        String office_id = entity.getOffice_id();
        if (office_id != null) {
            stmt.bindString(3, office_id);
        }
 
        String licensee = entity.getLicensee();
        if (licensee != null) {
            stmt.bindString(4, licensee);
        }
 
        String property_mark = entity.getProperty_mark();
        if (property_mark != null) {
            stmt.bindString(5, property_mark);
        }
 
        String pec_ref_no = entity.getPec_ref_no();
        if (pec_ref_no != null) {
            stmt.bindString(6, pec_ref_no);
        }
 
        String lpi_no = entity.getLpi_no();
        if (lpi_no != null) {
            stmt.bindString(7, lpi_no);
        }
 
        String dpr_ref_no = entity.getDpr_ref_no();
        if (dpr_ref_no != null) {
            stmt.bindString(8, dpr_ref_no);
        }
 
        String ra_ref_no = entity.getRa_ref_no();
        if (ra_ref_no != null) {
            stmt.bindString(9, ra_ref_no);
        }
 
        String harvest_date = entity.getHarvest_date();
        if (harvest_date != null) {
            stmt.bindString(10, harvest_date);
        }
 
        String coupe_no = entity.getCoupe_no();
        if (coupe_no != null) {
            stmt.bindString(11, coupe_no);
        }
 
        String block_no = entity.getBlock_no();
        if (block_no != null) {
            stmt.bindString(12, block_no);
        }
 
        String camp_code = entity.getCamp_code();
        if (camp_code != null) {
            stmt.bindString(13, camp_code);
        }
 
        String log_serial_no = entity.getLog_serial_no();
        if (log_serial_no != null) {
            stmt.bindString(14, log_serial_no);
        }
 
        String species_code = entity.getSpecies_code();
        if (species_code != null) {
            stmt.bindString(15, species_code);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(16, length);
        }
 
        Double diameter = entity.getDiameter();
        if (diameter != null) {
            stmt.bindDouble(17, diameter);
        }
 
        Double defect_dia = entity.getDefect_dia();
        if (defect_dia != null) {
            stmt.bindDouble(18, defect_dia);
        }
 
        Double net_vol = entity.getNet_vol();
        if (net_vol != null) {
            stmt.bindDouble(19, net_vol);
        }
 
        Double compute_vol = entity.getCompute_vol();
        if (compute_vol != null) {
            stmt.bindDouble(20, compute_vol);
        }
 
        String ra_processing_office = entity.getRa_processing_office();
        if (ra_processing_office != null) {
            stmt.bindString(21, ra_processing_office);
        }
 
        String hammer_mark_no = entity.getHammer_mark_no();
        if (hammer_mark_no != null) {
            stmt.bindString(22, hammer_mark_no);
        }
 
        String place_ra_marking = entity.getPlace_ra_marking();
        if (place_ra_marking != null) {
            stmt.bindString(23, place_ra_marking);
        }
 
        String trp_ref_no = entity.getTrp_ref_no();
        if (trp_ref_no != null) {
            stmt.bindString(24, trp_ref_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(25, name);
        }
 
        String tran_mode = entity.getTran_mode();
        if (tran_mode != null) {
            stmt.bindString(26, tran_mode);
        }
 
        String by_name = entity.getBy_name();
        if (by_name != null) {
            stmt.bindString(27, by_name);
        }
 
        String rp_no = entity.getRp_no();
        if (rp_no != null) {
            stmt.bindString(28, rp_no);
        }
 
        String to_loc = entity.getTo_loc();
        if (to_loc != null) {
            stmt.bindString(29, to_loc);
        }
 
        String frm_loc = entity.getFrm_loc();
        if (frm_loc != null) {
            stmt.bindString(30, frm_loc);
        }
 
        String sync_status = entity.getSync_status();
        if (sync_status != null) {
            stmt.bindString(31, sync_status);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LogRegisterQuery readEntity(Cursor cursor, int offset) {
        LogRegisterQuery entity = new LogRegisterQuery( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // regis_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // office_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // licensee
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // property_mark
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pec_ref_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lpi_no
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dpr_ref_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ra_ref_no
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // harvest_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // coupe_no
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // block_no
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // camp_code
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // log_serial_no
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // species_code
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // length
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // diameter
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // defect_dia
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // net_vol
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // compute_vol
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ra_processing_office
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // hammer_mark_no
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // place_ra_marking
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // trp_ref_no
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // name
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tran_mode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // by_name
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // rp_no
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // to_loc
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // frm_loc
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30) // sync_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogRegisterQuery entity, int offset) {
        entity.setRegis_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDevice_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOffice_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLicensee(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProperty_mark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPec_ref_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLpi_no(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDpr_ref_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRa_ref_no(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHarvest_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCoupe_no(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBlock_no(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCamp_code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLog_serial_no(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSpecies_code(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLength(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setDiameter(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setDefect_dia(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setNet_vol(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setCompute_vol(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setRa_processing_office(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHammer_mark_no(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPlace_ra_marking(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTrp_ref_no(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTran_mode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBy_name(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRp_no(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTo_loc(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setFrm_loc(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSync_status(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LogRegisterQuery entity, long rowId) {
        return entity.getRegis_id();
    }
    
    @Override
    public String getKey(LogRegisterQuery entity) {
        if(entity != null) {
            return entity.getRegis_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogRegisterQuery entity) {
        return entity.getRegis_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
