package my.com.sains.teams.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MY_INSPECT_UPLOAD".
*/
public class MyInspectUploadDao extends AbstractDao<MyInspectUpload, Long> {

    public static final String TABLENAME = "MY_INSPECT_UPLOAD";

    /**
     * Properties of entity MyInspectUpload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Inspect_id = new Property(0, Long.class, "inspect_id", true, "INSPECT_ID");
        public final static Property Regis_id = new Property(1, String.class, "regis_id", false, "REGIS_ID");
        public final static Property Exch_det_id = new Property(2, String.class, "exch_det_id", false, "EXCH_DET_ID");
        public final static Property User_login_id = new Property(3, String.class, "user_login_id", false, "USER_LOGIN_ID");
        public final static Property User_name = new Property(4, String.class, "user_name", false, "USER_NAME");
        public final static Property Color_tag_no = new Property(5, String.class, "color_tag_no", false, "COLOR_TAG_NO");
        public final static Property Inspect_date_time = new Property(6, String.class, "inspect_date_time", false, "INSPECT_DATE_TIME");
        public final static Property Gps_lat = new Property(7, Double.class, "gps_lat", false, "GPS_LAT");
        public final static Property Gps_long = new Property(8, Double.class, "gps_long", false, "GPS_LONG");
        public final static Property Lpi_chk = new Property(9, String.class, "lpi_chk", false, "LPI_CHK");
        public final static Property Lpi_chk_result = new Property(10, String.class, "lpi_chk_result", false, "LPI_CHK_RESULT");
        public final static Property Species_chk = new Property(11, String.class, "species_chk", false, "SPECIES_CHK");
        public final static Property Species_chk_result = new Property(12, String.class, "species_chk_result", false, "SPECIES_CHK_RESULT");
        public final static Property Pro_mark_chk = new Property(13, String.class, "pro_mark_chk", false, "PRO_MARK_CHK");
        public final static Property Pro_mark_chk_result = new Property(14, String.class, "pro_mark_chk_result", false, "PRO_MARK_CHK_RESULT");
        public final static Property Jh_hammer_chk = new Property(15, String.class, "jh_hammer_chk", false, "JH_HAMMER_CHK");
        public final static Property Jh_hammer_chk_result = new Property(16, String.class, "jh_hammer_chk_result", false, "JH_HAMMER_CHK_RESULT");
        public final static Property Diameter_chk = new Property(17, String.class, "diameter_chk", false, "DIAMETER_CHK");
        public final static Property Dia_chk_result = new Property(18, String.class, "dia_chk_result", false, "DIA_CHK_RESULT");
        public final static Property Length_chk = new Property(19, String.class, "length_chk", false, "LENGTH_CHK");
        public final static Property Length_chk_result = new Property(20, String.class, "length_chk_result", false, "LENGTH_CHK_RESULT");
        public final static Property Remarks = new Property(21, String.class, "remarks", false, "REMARKS");
    }


    public MyInspectUploadDao(DaoConfig config) {
        super(config);
    }
    
    public MyInspectUploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_INSPECT_UPLOAD\" (" + //
                "\"INSPECT_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: inspect_id
                "\"REGIS_ID\" TEXT," + // 1: regis_id
                "\"EXCH_DET_ID\" TEXT," + // 2: exch_det_id
                "\"USER_LOGIN_ID\" TEXT," + // 3: user_login_id
                "\"USER_NAME\" TEXT," + // 4: user_name
                "\"COLOR_TAG_NO\" TEXT," + // 5: color_tag_no
                "\"INSPECT_DATE_TIME\" TEXT," + // 6: inspect_date_time
                "\"GPS_LAT\" REAL," + // 7: gps_lat
                "\"GPS_LONG\" REAL," + // 8: gps_long
                "\"LPI_CHK\" TEXT," + // 9: lpi_chk
                "\"LPI_CHK_RESULT\" TEXT," + // 10: lpi_chk_result
                "\"SPECIES_CHK\" TEXT," + // 11: species_chk
                "\"SPECIES_CHK_RESULT\" TEXT," + // 12: species_chk_result
                "\"PRO_MARK_CHK\" TEXT," + // 13: pro_mark_chk
                "\"PRO_MARK_CHK_RESULT\" TEXT," + // 14: pro_mark_chk_result
                "\"JH_HAMMER_CHK\" TEXT," + // 15: jh_hammer_chk
                "\"JH_HAMMER_CHK_RESULT\" TEXT," + // 16: jh_hammer_chk_result
                "\"DIAMETER_CHK\" TEXT," + // 17: diameter_chk
                "\"DIA_CHK_RESULT\" TEXT," + // 18: dia_chk_result
                "\"LENGTH_CHK\" TEXT," + // 19: length_chk
                "\"LENGTH_CHK_RESULT\" TEXT," + // 20: length_chk_result
                "\"REMARKS\" TEXT);"); // 21: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_INSPECT_UPLOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyInspectUpload entity) {
        stmt.clearBindings();
 
        Long inspect_id = entity.getInspect_id();
        if (inspect_id != null) {
            stmt.bindLong(1, inspect_id);
        }
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(2, regis_id);
        }
 
        String exch_det_id = entity.getExch_det_id();
        if (exch_det_id != null) {
            stmt.bindString(3, exch_det_id);
        }
 
        String user_login_id = entity.getUser_login_id();
        if (user_login_id != null) {
            stmt.bindString(4, user_login_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String color_tag_no = entity.getColor_tag_no();
        if (color_tag_no != null) {
            stmt.bindString(6, color_tag_no);
        }
 
        String inspect_date_time = entity.getInspect_date_time();
        if (inspect_date_time != null) {
            stmt.bindString(7, inspect_date_time);
        }
 
        Double gps_lat = entity.getGps_lat();
        if (gps_lat != null) {
            stmt.bindDouble(8, gps_lat);
        }
 
        Double gps_long = entity.getGps_long();
        if (gps_long != null) {
            stmt.bindDouble(9, gps_long);
        }
 
        String lpi_chk = entity.getLpi_chk();
        if (lpi_chk != null) {
            stmt.bindString(10, lpi_chk);
        }
 
        String lpi_chk_result = entity.getLpi_chk_result();
        if (lpi_chk_result != null) {
            stmt.bindString(11, lpi_chk_result);
        }
 
        String species_chk = entity.getSpecies_chk();
        if (species_chk != null) {
            stmt.bindString(12, species_chk);
        }
 
        String species_chk_result = entity.getSpecies_chk_result();
        if (species_chk_result != null) {
            stmt.bindString(13, species_chk_result);
        }
 
        String pro_mark_chk = entity.getPro_mark_chk();
        if (pro_mark_chk != null) {
            stmt.bindString(14, pro_mark_chk);
        }
 
        String pro_mark_chk_result = entity.getPro_mark_chk_result();
        if (pro_mark_chk_result != null) {
            stmt.bindString(15, pro_mark_chk_result);
        }
 
        String jh_hammer_chk = entity.getJh_hammer_chk();
        if (jh_hammer_chk != null) {
            stmt.bindString(16, jh_hammer_chk);
        }
 
        String jh_hammer_chk_result = entity.getJh_hammer_chk_result();
        if (jh_hammer_chk_result != null) {
            stmt.bindString(17, jh_hammer_chk_result);
        }
 
        String diameter_chk = entity.getDiameter_chk();
        if (diameter_chk != null) {
            stmt.bindString(18, diameter_chk);
        }
 
        String dia_chk_result = entity.getDia_chk_result();
        if (dia_chk_result != null) {
            stmt.bindString(19, dia_chk_result);
        }
 
        String length_chk = entity.getLength_chk();
        if (length_chk != null) {
            stmt.bindString(20, length_chk);
        }
 
        String length_chk_result = entity.getLength_chk_result();
        if (length_chk_result != null) {
            stmt.bindString(21, length_chk_result);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(22, remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyInspectUpload entity) {
        stmt.clearBindings();
 
        Long inspect_id = entity.getInspect_id();
        if (inspect_id != null) {
            stmt.bindLong(1, inspect_id);
        }
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(2, regis_id);
        }
 
        String exch_det_id = entity.getExch_det_id();
        if (exch_det_id != null) {
            stmt.bindString(3, exch_det_id);
        }
 
        String user_login_id = entity.getUser_login_id();
        if (user_login_id != null) {
            stmt.bindString(4, user_login_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String color_tag_no = entity.getColor_tag_no();
        if (color_tag_no != null) {
            stmt.bindString(6, color_tag_no);
        }
 
        String inspect_date_time = entity.getInspect_date_time();
        if (inspect_date_time != null) {
            stmt.bindString(7, inspect_date_time);
        }
 
        Double gps_lat = entity.getGps_lat();
        if (gps_lat != null) {
            stmt.bindDouble(8, gps_lat);
        }
 
        Double gps_long = entity.getGps_long();
        if (gps_long != null) {
            stmt.bindDouble(9, gps_long);
        }
 
        String lpi_chk = entity.getLpi_chk();
        if (lpi_chk != null) {
            stmt.bindString(10, lpi_chk);
        }
 
        String lpi_chk_result = entity.getLpi_chk_result();
        if (lpi_chk_result != null) {
            stmt.bindString(11, lpi_chk_result);
        }
 
        String species_chk = entity.getSpecies_chk();
        if (species_chk != null) {
            stmt.bindString(12, species_chk);
        }
 
        String species_chk_result = entity.getSpecies_chk_result();
        if (species_chk_result != null) {
            stmt.bindString(13, species_chk_result);
        }
 
        String pro_mark_chk = entity.getPro_mark_chk();
        if (pro_mark_chk != null) {
            stmt.bindString(14, pro_mark_chk);
        }
 
        String pro_mark_chk_result = entity.getPro_mark_chk_result();
        if (pro_mark_chk_result != null) {
            stmt.bindString(15, pro_mark_chk_result);
        }
 
        String jh_hammer_chk = entity.getJh_hammer_chk();
        if (jh_hammer_chk != null) {
            stmt.bindString(16, jh_hammer_chk);
        }
 
        String jh_hammer_chk_result = entity.getJh_hammer_chk_result();
        if (jh_hammer_chk_result != null) {
            stmt.bindString(17, jh_hammer_chk_result);
        }
 
        String diameter_chk = entity.getDiameter_chk();
        if (diameter_chk != null) {
            stmt.bindString(18, diameter_chk);
        }
 
        String dia_chk_result = entity.getDia_chk_result();
        if (dia_chk_result != null) {
            stmt.bindString(19, dia_chk_result);
        }
 
        String length_chk = entity.getLength_chk();
        if (length_chk != null) {
            stmt.bindString(20, length_chk);
        }
 
        String length_chk_result = entity.getLength_chk_result();
        if (length_chk_result != null) {
            stmt.bindString(21, length_chk_result);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(22, remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyInspectUpload readEntity(Cursor cursor, int offset) {
        MyInspectUpload entity = new MyInspectUpload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // inspect_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // regis_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // exch_det_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_login_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color_tag_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inspect_date_time
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // gps_lat
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // gps_long
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lpi_chk
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lpi_chk_result
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // species_chk
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // species_chk_result
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pro_mark_chk
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pro_mark_chk_result
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // jh_hammer_chk
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jh_hammer_chk_result
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // diameter_chk
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dia_chk_result
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // length_chk
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // length_chk_result
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyInspectUpload entity, int offset) {
        entity.setInspect_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegis_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExch_det_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_login_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor_tag_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInspect_date_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGps_lat(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setGps_long(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLpi_chk(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLpi_chk_result(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpecies_chk(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpecies_chk_result(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPro_mark_chk(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPro_mark_chk_result(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJh_hammer_chk(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJh_hammer_chk_result(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDiameter_chk(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDia_chk_result(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLength_chk(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLength_chk_result(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRemarks(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyInspectUpload entity, long rowId) {
        entity.setInspect_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyInspectUpload entity) {
        if(entity != null) {
            return entity.getInspect_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyInspectUpload entity) {
        return entity.getInspect_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
