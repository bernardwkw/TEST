package my.com.sains.teams.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOG_REGISTER".
*/
public class LogRegisterDao extends AbstractDao<LogRegister, String> {

    public static final String TABLENAME = "LOG_REGISTER";

    /**
     * Properties of entity LogRegister.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Exch_det_id = new Property(0, String.class, "exch_det_id", true, "EXCH_DET_ID");
        public final static Property Exch_id = new Property(1, String.class, "exch_id", false, "EXCH_ID");
        public final static Property Regis_id = new Property(2, String.class, "regis_id", false, "REGIS_ID");
        public final static Property Coupe_no = new Property(3, String.class, "coupe_no", false, "COUPE_NO");
        public final static Property Block_no = new Property(4, String.class, "block_no", false, "BLOCK_NO");
        public final static Property Camp_code = new Property(5, String.class, "camp_code", false, "CAMP_CODE");
        public final static Property Lpi_no = new Property(6, String.class, "lpi_no", false, "LPI_NO");
        public final static Property Log_serial_no = new Property(7, String.class, "log_serial_no", false, "LOG_SERIAL_NO");
        public final static Property Species_code = new Property(8, String.class, "species_code", false, "SPECIES_CODE");
        public final static Property Pro_mark_reg_no = new Property(9, String.class, "pro_mark_reg_no", false, "PRO_MARK_REG_NO");
        public final static Property Length = new Property(10, Double.class, "length", false, "LENGTH");
        public final static Property Diameter = new Property(11, Double.class, "diameter", false, "DIAMETER");
        public final static Property Defect_dia = new Property(12, Double.class, "defect_dia", false, "DEFECT_DIA");
        public final static Property Net_vol = new Property(13, Double.class, "net_vol", false, "NET_VOL");
        public final static Property Compute_vol = new Property(14, Double.class, "compute_vol", false, "COMPUTE_VOL");
        public final static Property Spec_check = new Property(15, String.class, "spec_check", false, "SPEC_CHECK");
    }


    public LogRegisterDao(DaoConfig config) {
        super(config);
    }
    
    public LogRegisterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_REGISTER\" (" + //
                "\"EXCH_DET_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: exch_det_id
                "\"EXCH_ID\" TEXT," + // 1: exch_id
                "\"REGIS_ID\" TEXT," + // 2: regis_id
                "\"COUPE_NO\" TEXT," + // 3: coupe_no
                "\"BLOCK_NO\" TEXT," + // 4: block_no
                "\"CAMP_CODE\" TEXT," + // 5: camp_code
                "\"LPI_NO\" TEXT," + // 6: lpi_no
                "\"LOG_SERIAL_NO\" TEXT," + // 7: log_serial_no
                "\"SPECIES_CODE\" TEXT," + // 8: species_code
                "\"PRO_MARK_REG_NO\" TEXT," + // 9: pro_mark_reg_no
                "\"LENGTH\" REAL," + // 10: length
                "\"DIAMETER\" REAL," + // 11: diameter
                "\"DEFECT_DIA\" REAL," + // 12: defect_dia
                "\"NET_VOL\" REAL," + // 13: net_vol
                "\"COMPUTE_VOL\" REAL," + // 14: compute_vol
                "\"SPEC_CHECK\" TEXT);"); // 15: spec_check
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_REGISTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogRegister entity) {
        stmt.clearBindings();
 
        String exch_det_id = entity.getExch_det_id();
        if (exch_det_id != null) {
            stmt.bindString(1, exch_det_id);
        }
 
        String exch_id = entity.getExch_id();
        if (exch_id != null) {
            stmt.bindString(2, exch_id);
        }
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(3, regis_id);
        }
 
        String coupe_no = entity.getCoupe_no();
        if (coupe_no != null) {
            stmt.bindString(4, coupe_no);
        }
 
        String block_no = entity.getBlock_no();
        if (block_no != null) {
            stmt.bindString(5, block_no);
        }
 
        String camp_code = entity.getCamp_code();
        if (camp_code != null) {
            stmt.bindString(6, camp_code);
        }
 
        String lpi_no = entity.getLpi_no();
        if (lpi_no != null) {
            stmt.bindString(7, lpi_no);
        }
 
        String log_serial_no = entity.getLog_serial_no();
        if (log_serial_no != null) {
            stmt.bindString(8, log_serial_no);
        }
 
        String species_code = entity.getSpecies_code();
        if (species_code != null) {
            stmt.bindString(9, species_code);
        }
 
        String pro_mark_reg_no = entity.getPro_mark_reg_no();
        if (pro_mark_reg_no != null) {
            stmt.bindString(10, pro_mark_reg_no);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(11, length);
        }
 
        Double diameter = entity.getDiameter();
        if (diameter != null) {
            stmt.bindDouble(12, diameter);
        }
 
        Double defect_dia = entity.getDefect_dia();
        if (defect_dia != null) {
            stmt.bindDouble(13, defect_dia);
        }
 
        Double net_vol = entity.getNet_vol();
        if (net_vol != null) {
            stmt.bindDouble(14, net_vol);
        }
 
        Double compute_vol = entity.getCompute_vol();
        if (compute_vol != null) {
            stmt.bindDouble(15, compute_vol);
        }
 
        String spec_check = entity.getSpec_check();
        if (spec_check != null) {
            stmt.bindString(16, spec_check);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogRegister entity) {
        stmt.clearBindings();
 
        String exch_det_id = entity.getExch_det_id();
        if (exch_det_id != null) {
            stmt.bindString(1, exch_det_id);
        }
 
        String exch_id = entity.getExch_id();
        if (exch_id != null) {
            stmt.bindString(2, exch_id);
        }
 
        String regis_id = entity.getRegis_id();
        if (regis_id != null) {
            stmt.bindString(3, regis_id);
        }
 
        String coupe_no = entity.getCoupe_no();
        if (coupe_no != null) {
            stmt.bindString(4, coupe_no);
        }
 
        String block_no = entity.getBlock_no();
        if (block_no != null) {
            stmt.bindString(5, block_no);
        }
 
        String camp_code = entity.getCamp_code();
        if (camp_code != null) {
            stmt.bindString(6, camp_code);
        }
 
        String lpi_no = entity.getLpi_no();
        if (lpi_no != null) {
            stmt.bindString(7, lpi_no);
        }
 
        String log_serial_no = entity.getLog_serial_no();
        if (log_serial_no != null) {
            stmt.bindString(8, log_serial_no);
        }
 
        String species_code = entity.getSpecies_code();
        if (species_code != null) {
            stmt.bindString(9, species_code);
        }
 
        String pro_mark_reg_no = entity.getPro_mark_reg_no();
        if (pro_mark_reg_no != null) {
            stmt.bindString(10, pro_mark_reg_no);
        }
 
        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(11, length);
        }
 
        Double diameter = entity.getDiameter();
        if (diameter != null) {
            stmt.bindDouble(12, diameter);
        }
 
        Double defect_dia = entity.getDefect_dia();
        if (defect_dia != null) {
            stmt.bindDouble(13, defect_dia);
        }
 
        Double net_vol = entity.getNet_vol();
        if (net_vol != null) {
            stmt.bindDouble(14, net_vol);
        }
 
        Double compute_vol = entity.getCompute_vol();
        if (compute_vol != null) {
            stmt.bindDouble(15, compute_vol);
        }
 
        String spec_check = entity.getSpec_check();
        if (spec_check != null) {
            stmt.bindString(16, spec_check);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LogRegister readEntity(Cursor cursor, int offset) {
        LogRegister entity = new LogRegister( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // exch_det_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // exch_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regis_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coupe_no
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // block_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // camp_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lpi_no
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // log_serial_no
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // species_code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pro_mark_reg_no
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // length
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // diameter
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // defect_dia
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // net_vol
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // compute_vol
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // spec_check
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogRegister entity, int offset) {
        entity.setExch_det_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setExch_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegis_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoupe_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBlock_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCamp_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLpi_no(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLog_serial_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSpecies_code(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPro_mark_reg_no(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLength(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDiameter(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setDefect_dia(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setNet_vol(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setCompute_vol(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setSpec_check(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LogRegister entity, long rowId) {
        return entity.getExch_det_id();
    }
    
    @Override
    public String getKey(LogRegister entity) {
        if(entity != null) {
            return entity.getExch_det_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogRegister entity) {
        return entity.getExch_det_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
